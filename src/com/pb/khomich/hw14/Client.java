package com.pb.khomich.hw14;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Scanner;

public class Client implements Runnable {

	static Socket socket;

	public Client() {
		try {

			// создаём сокет общения на стороне клиента в конструкторе объекта
			socket = new Socket("localhost", 1777);
			System.out.println("Участник вошел в чат");
			Thread.sleep(2000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {

		try (
			DataOutputStream oos = new DataOutputStream(socket.getOutputStream());
			DataInputStream ois = new DataInputStream(socket.getInputStream())) {

			int i = 0;
			// создаём рабочий цикл
			while (i < 5) {
				Scanner scanAdd = new Scanner(System.in);
				System.out.println("Введите сообщение:");
				String txt = scanAdd.nextLine();
				// пишем сообщение автогенерируемое циклом клиента в канал
				// сокета для сервера
				oos.writeUTF("Пользователь написал: " + txt);
				// проталкиваем сообщение из буфера сетевых сообщений в канал
				oos.flush();

				// ждём чтобы сервер успел прочесть сообщение из сокета и
				// ответить
				Thread.sleep(10);
				System.out.println("Client wrote & start waiting for data from server...");

				// забираем ответ из канала сервера в сокете
				// клиента и сохраняемеё в ois переменную, печатаем на
				// консоль
				System.out.println("reading...");
				String in = ois.readUTF();
				System.out.println(in);
				i++;
				Thread.sleep(5000);

			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
